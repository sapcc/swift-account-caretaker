#!/usr/bin/python

# Copyright 2018 SAP SE
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
from swift.common.internal_client import InternalClient
import sys

RATELIMIT_HEADER = "X-Account-Sysmeta-Global-Write-Ratelimit"


def check_header(clnt, account, details=False):
    print(f"Reading meta data for Account {account}")
    meta = clnt.get_account_metadata(account)

    if details:
        for key, value in list(meta.items()):
            print(f"\t{key}: {value}")
        print("")

    if RATELIMIT_HEADER.lower() in meta:
        print(f"{RATELIMIT_HEADER}: {meta[RATELIMIT_HEADER.lower()]}")
    else:
        print(f"{RATELIMIT_HEADER} not set")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Global rate limit processing for swift account')
    parser.add_argument('-a', '--account', required=True, help='Account ID')
    parser.add_argument('-c', '--config',
                        default='/etc/swift/internal-client.conf',
                        help='Path to internal-client.conf.')
    parser.add_argument('-d', '--details', action="store_true", help='Show all account meta details')
    parser.add_argument('-r', '--remove', action="store_true", help='Remove ratelimit for account')
    parser.add_argument('-b', '--blacklist', action="store_true", help='BLACKLIST account')
    parser.add_argument('-w', '--whitelist', action="store_true", help='WHITELIST account')
    parser.add_argument('-l', '--limit', type=int, help='Set global rate limit for account')

    args = parser.parse_args(sys.argv[1:])

    client = InternalClient(args.config, "ratelimit/v0.0.2", 3)

    check_header(client, args.account, args.details)

    if args.remove or args.blacklist or args.whitelist or args.limit:
        ratelimit = ''
        if args.blacklist:
            ratelimit = "BLACKLIST"
        elif args.whitelist:
            ratelimit = "WHITELIST"
        elif args.limit:
            ratelimit = args.limit

        print(f"Setting header to '{ratelimit}'")
        client.set_account_metadata(args.account, {RATELIMIT_HEADER: ratelimit})

        check_header(client, args.account)

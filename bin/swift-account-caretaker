#!/usr/bin/python

# Copyright 2016 SAP SE
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
import argparse
import caretaker.accounts as acc
import datetime
import socket
import sys
import yaml
from os import environ
from statsd import StatsClient

from caretaker.common import *


def _get_password(given):
    """
    _get_password takes either a plain text password or a key for the
    environment variable that has the password as its value.
    The key has the format: `{ fromEnv: ENVIRONMENT_VARIABLE }`.
    If a key is given then the password is retrieved from that env variable.
    """

    t = type(given)
    if (t == str) or (t == dict):
        if t == str:
            return given
    else:
        sys.exit("invalid value for os_password: {}".format(given))

    # Get password from environment variable
    dict_key = "fromEnv"
    if not dict_key in given:
        sys.exit("invalid value, expected environment variable key in 'os_password.fromEnv', got: {}".format(given))

    key = given[dict_key]
    val = environ.get(key)
    if not val:
        sys.exit("environment variable '{}' is either undefined or empty".format(key))

    return val

def _build_os_config(arguments):
    os_config = {'common': {}, 'verify': [], 'scrape': []}
    pass_key = 'os_password'

    if arguments.config_file:
        with open(arguments.config_file, 'r') as stream:
            try:
                conf = yaml.load(stream=stream, Loader=yaml.FullLoader)
                if 'common' in conf:
                    common = conf['common']
                    os_config['common'] = common
                    if pass_key in common:
                        os_config['common'][pass_key] = _get_password(common[pass_key])
                    if 'os_auth_version' not in os_config['common']:
                        os_config['common']['os_auth_version'] = '3'
                else:
                    sys.exit("common missing in {0}".format(arguments.config_file))

                if 'verify' in conf:
                    for verify in conf['verify']:
                        if pass_key in verify:
                            verify[pass_key] = _get_password(verify[pass_key])
                        if 'os_auth_version' not in verify:
                            verify['os_auth_version'] = '3'

                        if 'scrape' in verify and verify['scrape']:
                            os_config['scrape'].append(verify)
                        else:
                            os_config['verify'].append(verify)
                else:
                    os_config['verify'].append(os_config['common'])
            except yaml.YAMLError as exc:
                sys.exit(exc.message)

    return os_config


def collect(arguments, os_config):
    accounts = acc.collect(arguments.device_dir)
    if arguments.verbose > 0:
        print(acc.format(accounts, delimiter="\t", with_header=True))

    if not arguments.no_upload:
        obj_name = 'collect/' + socket.getfqdn() + '_accounts.csv'
        # Don't keep retired storage node files
        headers = {'X-Delete-After': (2 * 24 * 60 * 60)}  # keep for 2 days
        contents = acc.format(accounts)
        swift_upload(swift_connection(os_config['common']), arguments.container, obj_name,
                                        contents, headers=headers)


def merge(arguments, os_config):
    connection = swift_connection(os_config['common'])
    contents = swift_download_all(connection, arguments.container, prefix='collect/')
    accounts = acc.merge(contents)
    if arguments.verbose > 0:
        print(acc.format(accounts, delimiter="\t", with_header=True))

    if not arguments.no_upload:
        contents = acc.format(accounts)
        swift_upload(connection, 'caretaker', 'merge/accounts.csv', contents)


def verify(arguments, os_config):
    connection = swift_connection(os_config['common'])
    contents = swift_download(connection, arguments.container, object_name='merge/accounts.csv')

    statsd = None
    if not arguments.disable_statsd:
        # initialize statsd client
        statsd = StatsClient(arguments.statsd_host, arguments.statsd_port, arguments.statsd_prefix)

    accounts = acc.verify(contents, os_config, statsd)
    if arguments.verbose > 0:
        print(acc.format(accounts, all_fields=True, delimiter="\t", with_header=True))

    if not arguments.no_upload:
        contents = acc.format(accounts, all_fields=True, with_header=True)
        swift_upload(connection, 'caretaker', 'accounts.csv', contents)

        if arguments.history > 0:
            obj_name = 'history/accounts' + datetime.date.today().strftime("_%Y_%m_%d") + '.csv'
            headers = {'X-Delete-After': (arguments.history * 24 * 60 * 60)}  # keep for x days
            swift_upload(connection, 'caretaker', obj_name, contents, headers=headers)

        orphans = list([d for d in accounts if d['status'] != acc.STATUS_VALID])
        contents = acc.format(orphans, all_fields=True, with_header=True)
        swift_upload(connection, 'caretaker', 'accounts_orphan.csv', contents)

        valid = list([d for d in accounts if d['status'] == acc.STATUS_VALID])
        contents = acc.format(valid, all_fields=True, with_header=True)
        swift_upload(connection, 'caretaker', 'accounts_valid.csv', contents)


def mergify(arguments, os_config):
    merge(arguments, os_config)
    verify(arguments, os_config)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(help='sub-command help')

    parser.add_argument('-c', '--config-file', required=True, help='Config File')
    parser.add_argument('-v', '--verbose', action="count", default=0,
                        help='Increase verbosity')
    parser.add_argument('-n', '--no-upload', action="store_true",
                        help='No upload to swift')
    parser.add_argument('-l', '--log-level',
                        default=environ.get('LOG_LEVEL', 'warn'),
                        help='Loglevel')
    parser.add_argument('--statsd-host',
                        default='localhost', help='Statsd Hostname')
    parser.add_argument('--statsd-port', type=int,
                        default=8125, help='Statsd Portnumber')
    parser.add_argument('--statsd-prefix',
                        default='caretaker', help='Statsd Prefix')

    parser_collect = subparsers.add_parser('collect', help='collect account info')
    parser_collect.set_defaults(func=collect)
    parser_collect.add_argument('--device-dir',
                                default='/srv/node',
                                help='Swift Device Directory. '
                                     'Defaults to /srv/node.')
    parser_collect.add_argument('--container',
                                default='caretaker',
                                help='Container for caretaker. '
                                     'Defaults to caretaker.')

    parser_merge = subparsers.add_parser('merge', help='Merge collected account info')
    parser_merge.set_defaults(func=merge)
    parser_merge.add_argument('--container',
                              default='caretaker',
                              help='Container for caretaker. '
                                   'Defaults to caretaker.')

    parser_verify = subparsers.add_parser('verify', help='Verify account info')
    parser_verify.set_defaults(func=verify)
    parser_verify.add_argument('--container',
                               default='caretaker',
                               help='Container for caretaker. '
                                    'Defaults to caretaker.')
    parser_verify.add_argument('--history', default=0, type=int,
                               help='Keep a copy of the accounts file for n days.')
    parser_verify.add_argument('--disable-statsd', action="store_true",
                               help='Do not sent statsd metrics')

    parser_mergify = subparsers.add_parser('mergify', help='Merge and verify account info')
    parser_mergify.set_defaults(func=mergify)
    parser_mergify.add_argument('--container',
                                default='caretaker',
                                help='Container for caretaker. '
                                     'Defaults to caretaker.')
    parser_mergify.add_argument('--history', default=0, type=int,
                                help='Keep a copy of the accounts file for n days.')
    parser_mergify.add_argument('--disable-statsd', action="store_true",
                                help='Do not sent statsd metrics')

    _args = parser.parse_args(sys.argv[1:])
    logging.basicConfig(level=_args.log_level.upper())

    _os_config = _build_os_config(_args)

    _args.func(_args, _os_config)
